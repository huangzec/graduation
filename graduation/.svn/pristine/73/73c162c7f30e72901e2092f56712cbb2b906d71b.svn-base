<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="
         http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
			http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
			http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">
	<context:annotation-config />
	<context:component-scan base-package="com.mvc" />  <!-- 自动扫描所有注解该路径 -->
    <context:property-placeholder location="classpath:config/jdbc.properties"/>
    
	<bean id="dataSource"
		class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.driverClassName}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />		
	</bean>
	
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.cache.provider_class">
					org.hibernate.cache.EhCacheProvider
				</prop>
				<prop key="hibernate.cache.use_query_cache">true</prop>
				<prop key="hibernate.dialect">
					org.hibernate.dialect.MySQLDialect
				</prop>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>				
			</props>	
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.mvc.entity</value><!-- 扫描实体类，也就是平时所说的model -->
			</list>
	   </property>
	</bean>
	
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- Transaction -->
	<!-- <bean id="transactionManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean> -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="serviceMethods"
			expression="execution(* com.mvc.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice"
			pointcut-ref="serviceMethods" />
	</aop:config>
	
	<!--  <context:property-placeholder location="classpath:/hibernate.properties" />-->

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" p:dataSource-ref="dataSource"/>
	
	<!-- Dao的实现 -->
	<bean id="entityDao" class="com.mvc.dao.EntityDaoImpl">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- userDao 的实现  -->
	<bean id="userDao" class="com.mvc.dao.UserDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- tbofficeDao 的实现 -->
	<bean id="tbofficeDao" class="com.mvc.dao.TbofficeDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- deptmanagerDao 的实现 -->
	<bean id="deptmanagerDao" class="com.mvc.dao.DeptmanagerDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<!-- deptDao 的实现 -->
	<bean id="deptDao" class="com.mvc.dao.DeptDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- teacherDao 的实现 -->
	<bean id="teacherDao" class="com.mvc.dao.TeacherDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- tbgradeDao 的实现  -->
	<bean id="tbgradeDao" class="com.mvc.dao.TbgradeDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- professionDao 的实现 -->
	<bean id="professionDao" class="com.mvc.dao.ProfessionDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- tbclassDao 的实现 -->
	<bean id="tbclassDao" class="com.mvc.dao.TbclassDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- settimeDao 的实现 -->
	<bean id="settimeDao" class="com.mvc.dao.SettimeDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- studentDao 的实现 -->
	<bean id="studentDao" class="com.mvc.dao.StudentDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- tbtopicDao 的实现 -->
	<bean id="tbtopicDao" class="com.mvc.dao.TbtopicDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- sontopicDao 的实现 -->
	<bean id="sontopicDao" class="com.mvc.dao.SontopicDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- messageDao 的实现 -->
	<bean id="messageDao" class="com.mvc.dao.MessageDao">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	
	<bean id="actorDaoImpl" class="com.mvc.dao.ActorDaoImpl">  
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager" />
	<tx:annotation-driven mode="aspectj"/>
  
    <aop:aspectj-autoproxy/>  
</beans>